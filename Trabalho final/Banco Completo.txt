
DROP SCHEMA IF EXISTS musicmatic CASCADE;
CREATE SCHEMA musicmatic;
SET search_path TO musicmatic;
 
create table artista(
	nasc DATE not null,
	nome varchar(200) constraint artistaPK primary key,
	idade INT,
	url varchar(300)
 
);
 
create table usuario(
	id int primary key,
	nome varchar(250),
	email varchar(250),
	endereço varchar(250),
	sexo char,
	idade int
);
 
create table userNegocio (
	id int,
	cnpj varchar(20) primary key,
	foreign key(id) references usuario(id)
);
 
create table musica (
    titulo VARCHAR(200),
	nomeArtista varchar(200) not null,
    ano INT,
    duracao int not null, --EM SEGUNDOS
    genero VARCHAR(200),
	userUpload varchar(20), --CADA MUSICA DEVE SER INCLUIDA POR UM USER DE NEGOCIOS
	primary key(titulo),
	foreign key(nomeArtista) references artista(nome),
	foreign key(userUpload) references userNegocio(cnpj)
);
 
create table musicaSingle(
	id int primary key,
	titulo varchar(200) not null,
	foreign key(titulo) references musica(titulo)
);
 
create table musicaHit(
	id int primary key,
	titulo varchar(200) not null,
	foreign key(titulo) references musica(titulo)
);
 
create table comprasSingle(
	id serial primary key,
	idSingle int  not null,
	userid int not null,
	valor decimal(5,2),
	
	foreign key(idSingle) references musicaSingle(id), 
	foreign key(userid) references usuario(id)
);
 
create table album (
    id int primary key,
    nome varchar(200) NOT NULL,
    usuario_id INT NOT NULL references usuario(id),
    unique (nome, usuario_id)
);
 
create table AlbumHits(
	id serial primary key,
	albumId int not null,
	hitId int not null,
	posicao serial,
	unique (albumId, hitID),
	
	foreign key(albumId) references album(id),
	foreign key(hitId) references musicaHit(id)
);
 
create table similaridade(
	usuario1 int not null,
	usuario2 int not null,
	similaridade int,
	unique(usuario1, usuario2),
	check(usuario1 <> usuario2),
	check(similaridade >= 0 AND similaridade <=100), --pode variar de 0 a 100, sendo 100 gostos iguais
	
	foreign key(usuario1) references usuario(id),
	foreign key(usuario2) references usuario(id)
);
 
create table tempoMusica(
	id serial,
	musica varchar(200),
	userID int, 
	tempoSegundos int,
	
	foreign key(musica) references musica(titulo),
	foreign key (userID) references usuario(id)
);
 
create table tempoArtista(
	artista varchar(200),
	userID int,
	tempoSegundos int,
	
	foreign key(artista) references artista(nome),
	foreign key(userID) references usuario(id)
);


create table blacklist(
	userID int,
	musica varchar(200),
	foreign key (userID) references usuario(id),
	foreign key(musica) references musica(titulo)
);
 
 



--======================================= TRIGGERS ============================================


--CALC IDADE PELA DATA DE NASC
create or replace function calc_Idade()
returns trigger as $$
declare 
	dataNasc DATE;
	idade int;
BEGIN
	dataNasc := new.nasc;
	idade := DATE_PART('year', CURRENT_DATE) - DATE_PART('year', dataNasc);
	
	--Analisa mes e dia
	IF DATE_PART('month', CURRENT_DATE) < DATE_PART('month', dataNasc)
       OR (DATE_PART('month', CURRENT_DATE) = DATE_PART('month', dataNasc)
       AND DATE_PART('day', CURRENT_DATE) < DATE_PART('day', dataNasc)) THEN
        idade := idade - 1;
    END IF;
	
	new.idade := idade;
	
	return new;
end;
$$ language plpgsql;
 
 
create trigger trigger_calcIdade
before insert on artista
for each row
execute function calc_Idade();
 
 
--adiciona o tempo de musica que cada usuario ouviu 
 
create or replace function add_tempo()
returns trigger as $$
begin
	if exists(
		select 1 from tempoMusica t
		where t.musica = new.musica and t.userID = new.userID
	)then
		update tempoMusica
		set tempoSegundos = tempoSegundos + new.temposegundos
		where musica = new.musica and userID = new.userID;
		return null;
	END if;
	
	return new;
	end;
	$$language plpgsql;
	
	
create trigger trigger_addTempo
before insert on tempoMusica
for each row
execute function add_tempo();
	

--add tempo ouvido dos artistas
create or replace function add_tempo_artista()
returns trigger as $$
begin
    if exists(
        select 1
        from tempoArtista ta
        where ta.artista = (select nomeArtista from musica where titulo = new.musica)
        AND ta.userID = new.userID
    ) then
        update tempoArtista
        set tempoSegundos = tempoSegundos + new.tempoSegundos
        where artista = (select nomeArtista from musica where titulo = new.musica)
        and userID = new.userID;
    else
        insert into tempoArtista (artista, userID, tempoSegundos)
        values ((select nomeArtista from musica where titulo = new.musica), new.userID, new.tempoSegundos);
    END IF;

    return new;
end;
$$ LANGUAGE plpgsql;


create trigger trigger_addTempo_artista
before insert on tempoMusica
for each row
execute function add_tempo_artista();

 
--===================================== Stored Procedure =================================
 
 
create or replace procedure registrar_compra_musica(
    in p_titulo varchar(200),
    in p_user_id int,
    in p_valor decimal(5,2),
    in p_idcompra int
)
language plpgsql
as $$
begin
    -- verifica se a música existe no banco de dados
    if not exists (select 1 from musica where titulo = p_titulo) then
        raise exception 'a música especificada não existe.';
    end if;
 
    -- verifica se o usuário existe no banco de dados
    if not exists (select 1 from usuario where id = p_user_id) then
        raise exception 'o usuário especificado não existe.';
    end if;

    -- verifican se a música desejada já foi vendida
    if exists (select 1 from comprassingle where idsingle = (select id from musicasingle m where m.titulo = p_titulo )) 
    then
        raise exception 'a música já foi vendida.';
    end if;
 
    -- registra a compra na tabela comprassingle
    insert into comprassingle (idsingle, userid, valor)
    values ((select id from musicasingle where titulo = p_titulo), p_user_id, p_valor);
end;
$$;

--CHAMADA DA STOREPROCEDURE
--call registrar_compra_musica('Play Hard', 039, 191.99, 456);



--======================================= INSERTS ============================================
 
 
-- Insets da tabela 'artista'
INSERT INTO artista (nasc, nome, idade, url) VALUES
('1987-07-17', 'Kendrick Lamar', 36, 'http://wikipedia.com/Kendrick_Lamar'),
('1989-03-20', 'BK', 35, 'http://wikipedia.com/BK'),
('1989-11-08', 'SZA', 34, 'http://wikipedia.com/SZA'),
('1981-09-04', 'Beyoncé', 42, 'http://wikipedia.com/Beyonce'),
('1970-06-08', 'Seu Jorge', 53, 'http://wikipedia.com/Seu_Jorge'),
('1967-11-07', 'David Guetta', 56, 'http://wikipedia.com/David_Guetta'),
('1985-08-17', 'Emicida', 38, 'http://wikipedia.com/Emicida'),
('1949-01-27', 'Djavan', 75, 'http://wikipedia.com/Djavan'),
('1969-06-22', 'Péricles', 54, 'http://wikipedia.com/Péricles'),
('1998-02-11', 'Khalid', 26, 'http://wikipedia.com/Khalid'),
('1990-05-15', 'Ariana Grande', 33, 'http://wikipedia.com/Ariana_Grande'),
('1975-12-18', 'Snoop Dogg', 49, 'http://wikipedia.com/Snoop_Dogg'),
('1984-03-30', 'Lady Gaga', 40, 'http://wikipedia.com/Lady_Gaga'),
('1993-09-08', 'Dua Lipa', 30, 'http://wikipedia.com/Dua_Lipa'),
('1977-11-28', 'Nicki Minaj', 46, 'http://wikipedia.com/Nicki_Minaj'),
('1987-02-17', 'Ed Sheeran', 37, 'http://wikipedia.com/Ed_Sheeran'),
('1994-11-05', 'Post Malone', 29, 'http://wikipedia.com/Post_Malone'),
('1991-04-04', 'Billie Eilish', 33, 'http://wikipedia.com/Billie_Eilish'),
('1972-10-18', 'Eminem', 51, 'http://wikipedia.com/Eminem'),
('1981-10-25', 'Katy Perry', 42, 'http://wikipedia.com/Katy_Perry');

-- Inserts da tabela 'usuario'
INSERT INTO usuario (id, nome, email, endereço, sexo, idade) VALUES
(034, 'Cauã Pereira', 'caua111@gmail.com', 'Rua iraque, 222, Bairro Brasil', 'M', 21),
(023, 'Florence Franklin', 'florenceF@hotmail.com', 'Rua Santos, 89, Bairro Silva', 'F', 23),
(039, 'João Vitor', 'joaovt@outlook.com', '789 Rua Cardoso, 32, Bairro Fonseca', 'M', 22),
(012, 'Renata Cristini', 'renataS@gmail.com', 'Rua Limão, 67, Bairro Serrado ', 'F', 20),
(046, 'Rafaela Pereira', 'rafinha@hotmail.com', 'Rua Satelite, 12, Bairro Estados ', 'F', 30),
(025, 'Arthur Lemes', 'Arthur90@outlook.com', 'Rua Morada, 908, Bairro Azul', 'M', 28),
(089, 'Giulia Silva', 'SilvaGiuia@gmail.com', 'Rua Março, 76, Bairro Italia', 'F', 31),
(054, 'Ricardo Rodrigues', 'rricard@gmail.com', 'Rua Messi, 90, Bairro Argentina', 'M', 27),
(071, 'Leonardo Castro', 'leocastro@hotmail.com', 'Rua Joaquim, 089, Bairro Minas', 'M', 33),
(059, 'Maria Silva', 'maria123@outlook.com', 'Rua Fidel, 234, Bairro Cuba', 'F', 29);

-- Inserts na tabela 'userNegocio'
INSERT INTO userNegocio (id, cnpj) VALUES
(034, '12345678901234'),
(023, '23456789012345'),
(039, '34567890123456'),
(012, '45678901234567'),
(046, '56789012345678'),
(025, '67890123456789'),
(089, '78901234567890'),
(054, '89012345678901'),
(071, '90123456789012'),
(059, '01234567890123');

-- Inserts na tabela 'musica'
INSERT INTO musica (titulo, nomeArtista, ano, duracao, genero, userUpload) VALUES
('Money Trees', 'Kendrick Lamar', 2012, 387, 'Hip Hop', '12345678901234'),
('Até que Durou', 'Péricles', 2018, 300, 'Pagode', '23456789012345'),
('Um amor puro', 'Djavan', 1999, 328, 'MPB', '34567890123456'),
('Hold Up', 'Beyoncé', 2016, 300, 'Pop', '45678901234567'),
('Planos', 'BK', 2018, 120, 'Hip Hop', '56789012345678'),
('Location', 'Khalid', 2017, 161, 'Pop', '67890123456789'),
('Kill Bill', 'SZA', 2022, 195, 'R&B', '78901234567890'),
('Final de Tarde', 'Péricles', 2014, 165, 'Pagode', '89012345678901'),
('Play Hard', 'David Guetta', 2014, 162, 'Eletronica', '90123456789012'),
('Oceano', 'Djavan', 2014, 376, 'MPB', '01234567890123'),
('thank u, next', 'Ariana Grande', 2018, 207, 'Pop', '12345678901234'),
('Gin and Juice', 'Snoop Dogg', 1993, 214, 'Hip Hop', '23456789012345'),
('Bad Romance', 'Lady Gaga', 2009, 294, 'Pop', '34567890123456'),
('New Rules', 'Dua Lipa', 2017, 221, 'Pop', '45678901234567'),
('Anaconda', 'Nicki Minaj', 2014, 260, 'Hip Hop', '56789012345678'),
('Shape of You', 'Ed Sheeran', 2017, 233, 'Pop', '67890123456789'),
('Circles', 'Post Malone', 2019, 215, 'Pop', '78901234567890'),
('Therefore I Am', 'Billie Eilish', 2020, 174, 'Pop', '89012345678901'),
('Lose Yourself', 'Eminem', 2002, 326, 'Hip Hop', '90123456789012'),
('Firework', 'Katy Perry', 2010, 227, 'Pop', '01234567890123');

-- Inserts na tabela 'musicaSingle'
INSERT INTO musicaSingle (id, titulo) VALUES
(03,'Play Hard'), (71,'Até que Durou'), (04,'Oceano'), (31,'Final de Tarde'), (12,'Location'),
(11,'thank u, next'), (49,'New Rules'), (98,'Anaconda'), (57,'Circles'), (61,'Lose Yourself');

-- Inserts na tabela 'musicaHit'
INSERT INTO musicaHit (id, titulo) VALUES
(25,'Money Trees'), (85,'Um amor puro'), (65,'Hold Up'), (41,'Planos'), (09,'Kill Bill'),
(44,'Gin and Juice'), (16,'Bad Romance'), (89,'Shape of You'), (45,'Therefore I Am'), (56,'Firework');

-- Inserts da tabela 'comprasSingle'
INSERT INTO comprasSingle (idSingle, userid, valor) VALUES
(03, 059, 191.99), (71, 071, 159.99), (04, 054, 20.99), (31, 089, 129.99), (12, 025, 102.99),
(61, 046, 130.99), (57, 012, 179.99), (98, 039, 559.99), (49, 023, 999.99), (11, 034, 459.99);

-- Inserts for table 'album'
INSERT INTO album (id,nome, usuario_id) VALUES
(434,'Melhores BK', 034), (323,'Só pop', 059), (34,'Djavan Lenda', 071), (232,'Antigas', 054), (230,'Eletronicas', 089),
(100,'GOAT KENDRICK', 025), (774,'SZA mentirosa', 046), (2,'Para acalmar', 012), (78,'Pagode de domingo', 039), (32,'MPB', 023);

-- Inserts for table 'AlbumHits'
INSERT INTO AlbumHits (albumId, hitId) VALUES
(32, 85), (78, 41), (2, 09), (774, 09), (100, 25),
(230, 56), (232, 16), (34, 85), (323, 89), (434, 41);

-- Inserts for table 'similaridade'
INSERT INTO similaridade (usuario1, usuario2, similaridade) VALUES
(034, 012, 80), (046, 089, 70), (059, 071, 60), (054, 089, 50), (034, 023, 40),
(023, 039, 30), (039, 046, 20), (046, 025, 10), (059, 012, 5), (054, 039, 85);

-- Inserts for table 'tempoMusica'
INSERT INTO tempoMusica (musica, userID, tempoSegundos) VALUES
('Bad Romance', 059, 180), ('thank u, next', 071, 210), ('Circles', 054, 195), ('Firework', 089, 240), ('Final de Tarde', 025, 170),
('Money Trees', 034, 220), ('Oceano', 023, 185), ('Play Hard', 039, 250), ('Kill Bill', 012, 200), ('Hold Up', 046, 230);

-- Inserts for table 'tempoArtista'
INSERT INTO tempoArtista (artista, userID, tempoSegundos) VALUES
('Ed Sheeran', 059, 580), ('Emicida', 071, 232), ('Seu Jorge', 054, 155), ('Post Malone', 089, 209), ('Beyoncé', 025, 110),
('Kendrick Lamar', 034, 320), ('Snoop Dogg', 023, 285), ('Khalid', 039, 450), ('SZA', 012, 200), ('Dua Lipa', 046, 234);

-- Inserts for table 'blacklist'
INSERT INTO blacklist (userID, musica) VALUES
(034, 'Circles'), (059, 'Kill Bill'), (023, 'Anaconda'), (039, 'Shape of You'), (012, 'Oceano'),
(046, 'New Rules'), (025, 'Lose Yourself'), (089, 'Até que Durou'), (054, 'Location'), (071, 'Play Hard');


--======================================= SELECTS ============================================


--Organiza as musicas Singles que deram mais lucro

select m.titulo, m.nomeArtista, sum(c.valor)
from musica m, comprasSingle c, musicaSingle ms
where c.idSingle = ms.id AND ms.titulo = m.titulo
group by m.titulo
order by sum(c.valor) DESC; 


--musica mais ouvida de cada artista

with Mais_ouvidas as( --tempo total de cada musica de artista e quantas vezes aparece; Agrupado por tempo
select m.NomeArtista as artista, t.musica, SUM(t.tempoSegundos) AS tempoTotalSegundos, 
	ROW_NUMBER() OVER (PARTITION BY m.nomeArtista ORDER BY sum(t.tempoSegundos) DESC) AS rn
from tempoMusica t, musica m
where t.musica = m.titulo
GROUP BY m.nomeArtista, t.musica
)

select artista, musica, tempoTotalSegundos / 60 AS tempoOuvidoMinutos --seleciona apenas o primeiro de cada artista ou seja o maior tempo
from Mais_ouvidas
where rn = 1;


--mais ouvida por faixa de idade
with usuario_idade as( --classifica a faixa de cada usuario
	select id, idade, 
	case
		when idade between 0 and 17 then '0-17'
		when idade between 18 and 30 then '18-30'
		when idade between 31 and 45 then '31-45'
		else '46+'
	end as faixa_idade
	from usuario
),
genero_tempo as(
	select u.faixa_idade, m.genero,
        sum(t.tempoSegundos) AS tempoTotalSegundos
    from usuario_idade u, tempoMusica t, musica m
	where u.id = t.userID and t.musica = m.titulo
    group by
        u.faixa_idade, m.genero
),
faixa_tempo as(
	select faixa_idade, sum(tempoTotalSegundos) as tempoTotalFaixa
	from genero_tempo
	group by faixa_idade
)

select g.faixa_idade, g.genero AS estilo_preferido, g.tempoTotalSegundos / 60 AS tempoOuvidoMinutos
from genero_tempo g, faixa_tempo f
where g.faixa_idade = f.faixa_idade AND
g.tempoTotalSegundos = ( select  max(tempoTotalSegundos)
        from genero_tempo
        where faixa_idade = g.faixa_idade
    );


--publico alvo de cada artista

with artistas_genero AS ( --conta quantos usuarios m ou femininos ouvem o artista 
    select  m.nomeArtista, u.sexo, COUNT(DISTINCT u.id) AS numOuvintes
    from musica m, tempoMusica t, usuario u
	where t.musica = m.titulo and u.id = t.userID
    group by m.nomeArtista, u.sexo
),
publico_alvo AS ( --e ordena por quantidade e classifica com rn
    select nomeArtista, sexo, ROW_NUMBER() OVER(PARTITION BY nomeArtista ORDER BY numOuvintes DESC) AS rn
    from artistas_genero
)
select nomeArtista, sexo as publico_alvo
from publico_alvo
where rn = 1;


--Mostra o usuario que mais gastou na plataforma
select c.userid, u.nome, sum(c.valor)
from comprassingle c, usuario u
where c.userid = u.id
group by c.userid, u.nome
order by sum(c.valor) DESC
limit 1;


--Artista mais ouvido no aplicativo
with tempo_total as(
	select m.nomeartista, sum(t.tempoSegundos) as tempoTotal
	from musica m,tempoMusica t
	where m.titulo = t.musica
	group by m.nomeartista
)
select nomeArtista, tempoTotal/60 as TempoTotal
from tempo_total
order by TempoTotal desc
limit 1;


--genero de musica mais ouvido no geral
select m.genero, (sum(tm.tempoSegundos)/60) AS Tempo_Total
from musica m, tempoMusica tm
where m.titulo = tm.musica
group by m.genero
order by sum(tm.tempoSegundos/60) DESC
LIMIT 1;


--nome e cnpj do usuario que mais fez upload de musicas
SELECT u.nome, un.cnpj, COUNT(*) AS total_uploads
FROM musica m, userNegocio un, Usuario u
where m.userupload = un.cnpj AND un.id = u.id
GROUP BY u.nome, un.cnpj
ORDER BY total_uploads DESC
LIMIT 1;



--Album mais vendido
select a.nome AS album, COUNT(*) AS total_vendas
from album a, AlbumHits ah, musicaHit mh
where a.id = ah.albumId and ah.hitId = mh.id
group by a.nome
order by total_vendas desc
LIMIT 1;


--Quantidade de ouvintes de cada estilo de musica
select m.genero, count(distinct t.userID) as numOuvintes
from musica m, tempoMusica t
where m.titulo = t.musica
group by  m.genero
order by numOuvintes DESC;



--======================================= UPDATES ==============================================


--atualiza a similaridade entre usuários com base em interesses musicais compartilhados
update similaridade as s
set similaridade = (
   select round((count(*) * 100) / 
       (select count(distinct genero) from musica m where m.titulo in 
           (select distinct tm.musica from tempoMusica tm where tm.userid = s.usuario1)
       ), 2)
   from (
       select distinct m.genero
       from tempoMusica tm
       join musica m on tm.musica = m.titulo
       where tm.userid = s.usuario1 and m.genero in 
           (select distinct m2.genero from tempoMusica tm2 join musica m2 on tm2.musica = m2.titulo where tm2.userid = s.usuario2)
   ) as t
)
where exists (
   select 1
   from usuario u1, usuario u2
   where u1.id = s.usuario1 and u2.id = s.usuario2
);


-- ajusta a similaridade com base nas idades dos usuários
update similaridade
set similaridade = similaridade + 10
where usuario1 in (select id from usuario where idade between 18 and 30) 
  and usuario2 in (select id from usuario where idade between 18 and 30);

 

